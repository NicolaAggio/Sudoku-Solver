ylab = "Dimensione")$counts
dimensions_pagelink <- hist(community_pagelink,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della community",
ylab = "Dimensione")
community_complete <- louvain_complete[,"communityId"]
community_pagelink <- louvain_pagelink[,"communityId"]
dimensions_complete <- hist(community_complete,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della community",
ylab = "Dimensione")$counts
dimensions_pagelink <- hist(community_pagelink,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della community",
ylab = "Dimensione")$counts
min_complete <- min(dimensions_complete)
max_complete <- max(dimensions_complete)
min_pagelink <- min(dimensions_pagelink)
max_complete <- max(dimensions_pagelink)
min_complete
max_complete
min_pagelink
max_pagelink
dimensions_pagelink
min_complete <- min(dimensions_complete)
max_complete <- max(dimensions_complete)
min_pagelink <- min(dimensions_pagelink)
max_pagelink <- max(dimensions_pagelink)
min_complete
max_complete
min_pagelink
max_pagelink
community_complete <- louvain_complete[,"communityId"]
community_pagelink <- louvain_pagelink[,"communityId"]
dimensions_complete <- hist(community_complete,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della community",
ylab = "Dimensione")$counts
dimensions_pagelink <- hist(community_pagelink,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della community",
ylab = "Dimensione")$counts
min_complete <- min(dimensions_complete)
max_complete <- max(dimensions_complete)
min_pagelink <- min(dimensions_pagelink)
max_pagelink <- max(dimensions_pagelink)
min_complete
max_complete
min_pagelink
max_pagelink
scc_complete <- read.csv("SCC_complete.csv")
scc_pagelink <- read.csv("SCC_pagelink.csv")
componentId_complete <- scc_complete[,"componentId"]
componentId_pagelink <- scc_pagelink[,"componentId"]
dimensions_complete <- hist(componentId_complete,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della community",
ylab = "Frequenza")$counts
dimensions_pagelink <- hist(componentId_pagelink,
col = "lightblue",
border = TRUE,
main = "",
xlab = "Id della componente",
ylab = "Frequenza")$counts
min_complete <- min(dimensions_complete)
max_complete <- max(dimensions_complete)
min_pagelink <- min(dimensions_pagelink)
max_pagelink <- max(dimensions_pagelink)
min_complete
max_complete
min_pagelink
max_pagelink
(0,95 * 0,04) / (0,95 * 0,04 + 0,01 * 0,96)
(0.95 * 0.04) / (0.95 * 0.04 + 0.01 * 0.96)
bin(7,4)
## Seed the current RNG, i.e., set the RNG status
set.seed(45)
## Sum of standard normal random variables
# Non-efficient version
N<-1000
S<-rep(0,N)
Z<-rnorm(N)
for (n in 2:N){
S[n]<-S[n-1]+Z[n] # n-th partial sum
}
head(S)
# Three line plots to study the behaviors of the partial sums
plot(S[1:N], type = 'l', xlim = c(0,N), ylim = max(abs(S))*c(-1,1),xlab = "n", ylab = "S(n)")
plot(S[1:N]/(1:N), type = 'l', xlim = c(0,N), ylim = c(-2,2),xlab = "n", ylab = "S(n)/n")
plot(S[1:N]/sqrt(1:N), type = 'l', xlim = c(0,N), ylim = c(-2,2),xlab = "n", ylab = "S(n)/sqrt(n)")
# Three line plots to study the behaviors of the partial sums
plot(S[1:N], type = 'l', xlim = c(0,N), ylim = max(abs(S))*c(-1,1),xlab = "n", ylab = "S(n)")
plot(S[1:N]/(1:N), type = 'l', xlim = c(0,N), ylim = c(-2,2),xlab = "n", ylab = "S(n)/n")
plot(S[1:N]/sqrt(1:N), type = 'l', xlim = c(0,N), ylim = c(-2,2),xlab = "n", ylab = "S(n)/sqrt(n)")
# We can set a different seed: you can see this as choosing a "little omega" from the sample space that generate the full sequence of standard normal random variables (and therefore the sequence of sums)
set.seed(85)
Z<-rnorm(N)
Z[1] <- 0
S2 <- cumsum(Z)
# Three line plots to study the behaviors of the two sequences of partial sums
# S(n) in black and S2(n) in red
plot(S[1:N], type = 'l', xlim = c(0,N), ylim = max(abs(c(S,S2)))*c(-1,1),xlab = "n", ylab = "S(n)")
lines(S2[1:N], col=2)
# S(n)/n
plot(S[1:N]/(0:(N-1)), type = 'l', xlim = c(0,N), ylim = c(-2,2),xlab = "n", ylab = "S(n)/n")
lines(S2[1:N]/(1:N), col=2)
plot(S[1:N]/sqrt(0:(N-1)), type = 'l', xlim = c(0,N), ylim = c(-4,4),xlab = "n", ylab = "S(n)/sqrt(n)")
lines(S2[1:N]/sqrt(1:N), col=2)
# You may need to install the package first:
# install.packages("animation")
library(animation)
des = c("This is a simulated example to show how partial sums of random variables behave\n\n", "S(n) is the sum of n independent standard normal random variables")
saveHTML({
ani.options(interval = 0.05)
idx = seq(1,N,10)
for(n in idx){
plot(S[1:n], type = 'l', xlim = c(0,N), ylim = c(-115,115),xlab = "n", ylab = "S(n)")
lines(S2[1:n], col=2)
}
}, img.name = "L6-Sums_plot", imgdir = "L6-Sums_dir", htmlfile = "L6-sums.html",
autobrowse = TRUE, autoplay=FALSE, navigator = FALSE,  title = "Demo of Partial Sums Behavior",
description = des)
dev.off()
setwd("G:\Il mio Drive\UNI\MAGISTRALE - A.I. AND DATA ENGINEERING\1 ANNO\1 SEMESTRE\APPLIED PROBABILITY FOR COMPUTER SCIENCE\2022-2023\Lezioni\RLabs")
des = c("This is a simulated example to show how partial sums of random variables behave\n\n", "S(n) is the sum of n independent standard normal random variables")
saveHTML({
ani.options(interval = 0.05)
idx = seq(1,N,10)
for(n in idx){
plot(S[1:n], type = 'l', xlim = c(0,N), ylim = c(-115,115),xlab = "n", ylab = "S(n)")
lines(S2[1:n], col=2)
}
}, img.name = "L6-Sums_plot", imgdir = "L6-Sums_dir", htmlfile = "L6-sums.html",
autobrowse = TRUE, autoplay=FALSE, navigator = FALSE,  title = "Demo of Partial Sums Behavior",
description = des)
dev.off()
# library(ggplot2)
# library(gganimate)
# Before saving, you may want to set your working directory to a known location
setwd("G:\\Il mio Drive\UNI\MAGISTRALE - A.I. AND DATA ENGINEERING\1 ANNO\1 SEMESTRE\APPLIED PROBABILITY FOR COMPUTER SCIENCE\2022-2023\Lezioni\RLabs")
# Before saving, you may want to set your working directory to a known location
setwd("G:\\Il mio Drive\\UNI\\MAGISTRALE - A.I. AND DATA ENGINEERING\1 ANNO\1 SEMESTRE\APPLIED PROBABILITY FOR COMPUTER SCIENCE\2022-2023\Lezioni\RLabs")
# Before saving, you may want to set your working directory to a known location
setwd("G:\\Il mio Drive\\UNI\\MAGISTRALE - A.I. AND DATA ENGINEERING\1 ANNO\1 SEMESTRE\\APPLIED PROBABILITY FOR COMPUTER SCIENCE\2022-2023\\Lezioni\\RLabs")
pbinom(3, 10, 0.2, lower.tail = FALSE)
15*0.18
pbinom(1, 15, 0.18, lower.tail = FALSE)
1 - pnbinom(14, 15, 0.05)
1 - pnbinom(14, 15, 0.05)
pbinom(12, 15, 0.05)
pbinom(12, 15, 0.95)
pbinom(11, 15, 0.95)
1 - pnbinom(14, 15, 0.95)
1 - pnbinom(13, 15, 0.95)
1 - pnbinom(13, 15, 0.05)
ppois(7,10,lower.tail = FALSE)
ppois(8,10,lower.tail = FALSE)
200*0.03
ppois(4,6)
pbinom(194, 200, 0.97, lower.tail = FALSE)
ppois(5,6)
dbinom(3,20,0.05)
pbinom(1, 5, 0.05)
pbinom(1, 4, 0.05)
pbinom(9,20,0.4, lower.tail = FALSE)
pbinom(3, 15, 0.05, lower.tail = FALSE)
dnbinom(10, 15, 0.05, 3)
dnbinom(10, 15, 0.05)
dnbinom(3, 10, 0.05)
pbinom(4,10,0.2,lower.tail = FALSE)
1-pgeom(3,0.2)
dbinom(8,10,0.1)
dbinom(8,10,0.9)
pbinom(4, 20, 0.2, lower.tail = FALSE)
ppois(4,9,lower.tail = FALSE)
dpois(5,9)
dpois(0,1)*0.2
(dpois(0,1)*0.2)/((dpois(0,1)*0.2) + (dpois(0,0.1) * 0.8))
(dpois(0,3)*0.2)/((dpois(0,3)*0.2) + (dpois(0,0.3) * 0.8))
4000/800
ppois(9,5)
dpois(10,5)
0.25*12
ppois(2,3,lower.tail = FALSE)
dpois(1,0.25)
pbinom(2, 12, dpois(1, 0.25), lower.tail = FALSE)
(dpois(7,10)*0.6)/((dpois(7,10)*0.6) + (dpois(7,4) * 0.4))
ppois(4,7,lower.tail = FALSE)
pexp(1/12, 3)
ppoi()
ppois(8, 0.75*8, lower.tail = FALSE) - ppois(8, 7.5, lower.tail = FALSE)
pnorm(300/200) - pnorm(-300/200)
pnorm(3.46, 0, 1)
pexp(36, 12)
pgamma(15, 4, 0.2)
pgamma(2,3,1) * pgamma(2,2,0.5)
pgamma(2,3,1) * pgamma(2,2,1)
pgamma(2,3,1, lower.tail = FALSE) * pgamma(2,2,0.5, lower.tail = FALSE)
pgamma(2,3,1, lower.tail = FALSE) * pgamma(2,2,1, lower.tail = FALSE)
pgamma(2,3,1, lower.tail = FALSE) * pgamma(2,2,2, lower.tail = FALSE)
pnorm((640 - 900)/200)
qnorm(0.05)
qnorm(0.05) + 900
qnorm(0.05) + 900/200
qnorm(0.05) * 200 + 900
qnorm(0.05) + 900 * 200
(20 - 82*15)/(4*sqrt(82))
pnorm(-33.40554)
(20*60 - 82*15)/(4*sqrt(82))
pnorm(-0.8282364)
(12 - 70/5)/(sqrt(70)/5)
pnorm(-1.195229)
pnorm((12 - 70/5)/(sqrt(70)/5))
pnorm((11.5 - 70/5)/(sqrt(70)/5))
pnorm(-1.195229 - 0.5)
pnorm(-1.195229 + 0.5)
(pexp(1,0.5) * 0.4)/((pexp(1,0.5) * 0.4) + punif(1,0,5) * 0.6)
0.15*12
0.55*12
ppois(2, 1.8, lower.tail = FALSE)
1-ppois(2, 1.8)
dpois(0,6.6)
pbinom(2,12,dpois(0,6.6), lower.tail = FALSE)
12*dpois(0,6.6)
1-pbinom(2,12,dpois(0,6.6))
cp <- read.csv("results.csv")
cd(C:\Users\naggi\Sudoku-solver\results\cp)
setwd("C:\Users\naggi\Sudoku-solver\results\cp")
setwd(C:\Users\naggi\Sudoku-solver\results\cp)
setwd("C:/Users/naggi/Sudoku-solver/results/cp")
cp <- read.csv("results.csv")
cp
boxplot(formula(execution_time ~ filename))
boxplot(formula(cp[execution_time] ~ cp[filename]))
boxplot(formula(cp["execution_time"] ~ cp["filename"]))
boxplot(formula(cp["execution_time"] ~ cp["filename"]), data = dp)
boxplot(formula(cp["execution_time"] ~ cp["filename"]), data = cp)
difficulties <- cp["filename"]
difficulties
cp <- read.csv("results.csv")
cp
difficulties <- cp["filename"]
difficulties
ex_times
ex_times <- cp["execution_time"]
ex_times
boxplot(difficulties ~ ex_times), data = cp)
boxplot(difficulties ~ ex_times))
boxplot(difficulties ~ ex_times)
plot(difficulties ~ ex_times)
boxplot(difficulties,ex_times)
cp <- read.csv("results.csv")
cp
difficulties <- cp["filename"]
difficulties
ex_times <- cp["execution_time"]
ex_times
boxplot(difficulties,ex_times)
boxplot(difficulties, ex_times*10)
boxplot(difficulties, ex_times*10)
boxplot(difficulties, ex_times*1000)
boxplot([difficulties, ex_times])
boxplot(difficulties,
ex_times,
ylab = "Execution time")
boxplot(ex_times,
difficulties,
ylab = "Execution time",
xlab = "")
cp <- read.csv("results.csv")
cp
easy <- cp[cp["filename"] == 1]
easy
ex_times
ex_times = cp["execution_time"]
ex_times
easy <- ex_times[1:5]
easy <- ex_times[1::5]
easy <- ex_times[0,1::5]
easy <- ex_times[0,1:5]
easy <- ex_times[1,1:5]
easy <- ex_times[1:5,0]
easy <- ex_times[1:5,1]
easy
normal <- ex_times[6:10, 1]
easy <- ex_times[1:5,1]
normal <- ex_times[6:10, 1]
medium <- ex_times[11:15, 1]
hard <- ex_times[16:20, 1]
boxplot(easy,
normal,
medium,
hard,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"))
boxplot(easy,
normal,
medium,
hard,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
border = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"))
boxplot(easy,
normal,
medium,
hard,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"))
pdf("Execution time comparison.pdf",7,7)
boxplot(easy,
normal,
medium,
hard,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Execution time comparison")
dev.off()
cp <- read.csv("results.csv")
back = cp["backpropagation"]
back
easy <- back[1:5,1]
normal <- back[6:10, 1]
medium <- back[11:15, 1]
hard <- back[16:20, 1]
pdf("Execution time comparison.pdf",7,7)
boxplot(easy,
normal,
medium,
hard,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Execution time comparison")
dev.off()
pdf("Execution time comparison.pdf",7,7)
boxplot(easy,
normal,
medium,
hard,
ylab = "Number of backtracks",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of backtracks comparison")
dev.off()
pdf("Number of backtracks comparison.pdf",7,7)
pdf("Number of backtracks comparison.pdf",7,7)
boxplot(easy,
normal,
medium,
hard,
ylab = "Number of backtracks",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of backtracks comparison")
dev.off()
cp <- read.csv("results.csv")
back = cp["backpropagation"]
back
easy <- back[1:5,1]
normal <- back[6:10, 1]
medium <- back[11:15, 1]
hard <- back[16:20, 1]
pdf("Number of backtracks comparison.pdf",4,4)
boxplot(easy,
normal,
medium,
hard,
ylab = "Number of backtracks",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of backtracks comparison")
dev.off()
setwd("C:/Users/naggi/Sudoku-solver/results/annealing")
sa <- read.csv("results.csv")
difficulties = cp["filename"]
difficulties = sa["filename"]
difficulties
sa <- read.csv("results.csv")
ex_time = sa["execution_time"]
iterations = sa["number_of_iterations"]
reheats = sa["number_of_reheats"]
sa <- read.csv("results.csv")
ex_time = sa["execution_time"]
iterations = sa["number_of_iterations"]
reheats = sa["number_of_reheats"]
easy_time <- ex_time[1:5,1]
normal_time <- ex_time[6:10, 1]
medium_time <- ex_time[11:15, 1]
hard_time <- ex_time[16:20, 1]
easy_iterations <- ex_time[1:5,1]
normal_iterations <- ex_time[6:10,1]
medium_iterations <- ex_time[11:15,1]
hard_iterations <- ex_time[16:20,1]
pdf("prova.pdf",4,4)
boxplot(easy_time,
normal_time,
medium_time,
hard_time,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Execution time comparison")
boxplot(easy_iterations,
normal_iterations,
medium_iterations,
hard_iterations,
ylab = "Number of iterations",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of iterations comparison")
dev.off()
pdf("prova.pdf",4,4)
boxplot(easy_time,
normal_time,
medium_time,
hard_time,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Execution time comparison")
dev.off()
pdf("prova.pdf",6,6)
boxplot(easy_time,
normal_time,
medium_time,
hard_time,
ylab = "Execution time",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Execution time comparison")
dev.off()
pdf("prova.pdf",6,6)
boxplot(easy_iterations,
normal_iterations,
medium_iterations,
hard_iterations,
ylab = "Number of iterations",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of iterations comparison")
dev.off()
easy_iterations <- ex_time[1:5,1]
normal_iterations <- ex_time[6:10,1]
medium_iterations <- ex_time[11:15,1]
hard_iterations <- ex_time[16:20,1]
pdf("prova.pdf",6,6)
boxplot(easy_iterations,
normal_iterations,
medium_iterations,
hard_iterations,
ylab = "Number of iterations",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of iterations comparison")
dev.off()
easy_iterations <- iterations[1:5,1]
normal_iterations <- iterations[6:10,1]
medium_iterations <- iterations[11:15,1]
hard_iterations <- iterations[16:20,1]
pdf("prova.pdf",6,6)
boxplot(easy_iterations,
normal_iterations,
medium_iterations,
hard_iterations,
ylab = "Number of iterations",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of iterations comparison")
dev.off()
easy_iterations <- iterations[1:5,1]
normal_iterations <- iterations[6:10,1]
medium_iterations <- iterations[11:15,1]
hard_iterations <- iterations[16:20,1]
pdf("prova.pdf",6,6)
boxplot(easy_iterations,
normal_iterations,
medium_iterations,
hard_iterations,
ylab = "Number of iterations",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of iterations comparison")
dev.off()
easy_reheats <- reheats[1:5,1]
normal_reheats <- reheats[6:10,1]
medium_reheats <- reheats[11:15,1]
hard_reheats <- reheats[16:20,1]
pdf("prova.pdf",6,6)
boxplot(easy_reheats,
normal_reheats,
medium_reheats,
hard_reheats,
ylab = "Number of reheats",
names = c("Easy", "Normal", "Medium", "Hard"),
col = c("#CC00FF", "#FF0000", "#00FF66", "#CCFF00", "#0066FF"),
title = "Number of reheats comparison")
dev.off()
